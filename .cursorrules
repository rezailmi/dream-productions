# Cursor AI Rules for Dream Machine Project

## Project Overview
Dream Machine is an AI-powered dream journal app built with Expo, React Native, and TypeScript. It reconstructs sleep memories from biometric data.

## Code Style & Standards

### TypeScript
- Use strict mode (enabled in tsconfig.json)
- No `any` types unless absolutely necessary
- Prefer interfaces over types for object shapes
- Use proper type inference where possible

### React Native & Expo
- Functional components with hooks only
- Use SafeAreaView for all screens
- Platform-specific code should use Platform.select()
- Follow iOS Human Interface Guidelines for native feel

### File Naming
- Components: PascalCase (e.g., `SettingsCard.tsx`)
- Screens: camelCase (e.g., `index.tsx`, `profile.tsx`)
- Utils/Services: camelCase (e.g., `demoData.ts`)
- Constants: PascalCase (e.g., `Colors.ts`, `Types.ts`)

### Component Structure
```tsx
// 1. Imports (React, React Native, third-party, local)
// 2. Types/Interfaces
// 3. Component definition
// 4. Styles (using StyleSheet.create)
```

## Documentation & Planning

### Plan Files
- **All plans and documentation must be saved in `/plan` folder**
- Plan files should use descriptive names (e.g., `feature-name.plan.md`)
- Implementation summaries should also go in `/plan` folder
- Update existing plan files rather than creating new ones when iterating

### Documentation Structure
Each feature implementation should include:
1. Overview of changes
2. Files affected
3. Code snippets with explanations
4. Testing instructions
5. Known limitations or TODOs

### Markdown Files Location
- `/plan/*.md` - All documentation, plans, guides, summaries
- `README.md` - Keep main README in project root
- Keep root clean - only essential config files and main README

## Native iOS Design

### Colors
- Use Radix colors copied to `/constants/Colors.ts`
- Semantic naming (primary, secondary, success, etc.)
- Support dark mode by default

### Glass Effects
- Use `expo-blur` for glass morphism on cards/surfaces
- Native tabs use `unstable-native-tabs` for liquid glass tab bar
- BlurView intensity: 10-20 for subtle effects

### SF Symbols
- Use SF Symbols for tab bar icons (iOS native)
- Format: `{ sfSymbol: 'icon.name.fill' }`
- Browse at: https://developer.apple.com/sf-symbols/

### Typography
- Headers: 18-32px, fontWeight: '600' or '700'
- Body: 14-16px, fontWeight: '400'
- Small: 12-14px, fontWeight: '500' or '600'

### Spacing
- Card radius: 12-16px
- Padding: 16-20px
- Margin between elements: 12px
- Use multiples of 4 or 8 for consistency

## Project Structure

```
dream-productions/
├── plan/                      # All documentation & plans
│   ├── *.plan.md             # Planning documents
│   ├── *.md                  # Implementation guides
│   └── QUICK_START.md        # Quick reference
├── app/
│   ├── _layout.tsx           # Root layout with provider
│   └── (tabs)/               # Tab-based navigation
│       ├── _layout.tsx       # Native tabs config
│       ├── index.tsx         # Home screen
│       ├── journal.tsx       # Journal screen
│       └── profile.tsx       # Profile screen
├── components/               # Reusable components
├── constants/                # Colors, Types, Config
├── contexts/                 # React Context providers
├── services/                 # Data services & APIs
└── assets/                   # Images, fonts, etc.
```

## State Management

### Context Pattern
- Use React Context for global state
- Keep contexts focused (one concern per context)
- Provide custom hooks (e.g., `useHealthData()`)
- Initialize with sensible defaults

### Example:
```tsx
// contexts/FeatureContext.tsx
export const FeatureProvider = ({ children }) => {
  // State and logic
  return <Context.Provider value={...}>{children}</Context.Provider>
};

export const useFeature = () => {
  const context = useContext(FeatureContext);
  if (!context) throw new Error('useFeature must be within provider');
  return context;
};
```

## Component Guidelines

### Settings Cards
- Use `SettingsCard` component for profile options
- Glass effect with BlurView on iOS
- Status badges: 'active' (green) or 'inactive' (gray)
- Icon with colored background circle

### Empty States
- Center content vertically
- Large icon (80px) in muted color
- Primary text (22px, bold)
- Secondary text (15px, subtle color)

### Loading States
- Use ActivityIndicator with brand colors
- Disable interaction during loading
- Show loading on buttons, not full screen overlay

## iOS Optimization

### Native Tabs
- Use `expo-router/unstable-native-tabs`
- Automatic liquid glass effect
- SF Symbols for icons
- Native animations and haptics

### Safe Areas
- Wrap screens with SafeAreaView
- Set edges: ['top'] for most screens
- Tab bar handles bottom inset automatically

### Platform-Specific
```tsx
import { Platform } from 'react-native';

Platform.select({
  ios: { /* iOS-specific styles */ },
  android: { /* Android fallback */ },
  default: { /* Fallback */ }
});
```

## Future Integration Points

### HealthKit (iOS)
- Permissions already in app.json
- Use HealthDataContext to switch source
- Map native data to SleepSession type

### Whoop API
- OAuth flow needed
- Store tokens securely
- Parse API response to SleepSession format

### AI Dream Reconstruction
- Process sleep data structure
- Analyze heart rate spikes for emotional content
- Map REM cycles to dream sequences

## Testing

### Manual Testing Checklist
- Tab navigation works smoothly
- Cards respond to touch with feedback
- Alerts show for coming soon features
- Demo data loads correctly
- Glass effects visible on iOS
- Dark mode looks correct

### Build Verification
```bash
npx expo export --platform ios --output-dir dist
```

## Common Commands

```bash
# Development
npm start                  # Start dev server
npm run ios               # Run on iOS simulator
npm run android           # Run on Android emulator

# Maintenance
npx expo install          # Install compatible versions
npx expo start --clear    # Clear cache
npx expo doctor           # Check for issues

# Build
npx expo prebuild         # Generate native projects
npx expo export           # Export for production
```

## Git Workflow

### Commit Message Format
- Use clear, descriptive messages
- Start with verb: "Add", "Update", "Fix", "Remove"
- Reference features: "Add native tabs with liquid glass effect"

### Files to Ignore
- See .gitignore for complete list
- Never commit: node_modules/, .expo/, dist/
- Commit: plan/ folder with documentation

## Comments & Documentation

### When to Comment
- Complex logic or algorithms
- Future integration points (marked with TODO)
- Non-obvious type choices
- Platform-specific workarounds

### Example:
```tsx
// Future: Replace with Apple Health data when integrated
const [dataSource, setDataSource] = useState<DataSource>('demo');

// Using BlurView for iOS liquid glass effect
// Falls back to semi-transparent background on Android
const CardContainer = Platform.OS === 'ios' ? BlurView : View;
```

## AI Assistant Guidelines

When helping with this project:
1. **Save all plans and documentation to `/plan` folder**
2. Maintain existing code style and patterns
3. Use TypeScript strictly
4. Optimize for iOS experience first
5. Keep components focused and reusable
6. Document integration points for future features
7. Test on iOS simulator before marking complete
8. Update relevant plan files when making changes

## References

- Expo Router: https://docs.expo.dev/router/introduction/
- Native Tabs: https://docs.expo.dev/router/advanced/native-tabs/
- SF Symbols: https://developer.apple.com/sf-symbols/
- Radix Colors: https://www.radix-ui.com/colors
- React Native: https://reactnative.dev/docs/getting-started

